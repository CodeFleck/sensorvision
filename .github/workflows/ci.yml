name: CI - Build and Test

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
  pull_request:
    branches:
      - main
      - develop

jobs:
  # =============================================================================
  # Backend Tests (Spring Boot)
  # =============================================================================
  backend-test:
    name: Backend Build & Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: sensorvision_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build --no-daemon --stacktrace
        env:
          DB_URL: jdbc:postgresql://localhost:5432/sensorvision_test
          DB_USERNAME: test_user
          DB_PASSWORD: test_password
          JWT_SECRET: test-secret-key-for-ci-only-do-not-use-in-production-12345678
          MQTT_BROKER_URL: tcp://localhost:1883

      - name: Run tests
        run: ./gradlew test --no-daemon --stacktrace
        env:
          DB_URL: jdbc:postgresql://localhost:5432/sensorvision_test
          DB_USERNAME: test_user
          DB_PASSWORD: test_password
          JWT_SECRET: test-secret-key-for-ci-only-do-not-use-in-production-12345678
          MQTT_BROKER_URL: tcp://localhost:1883

      - name: Generate test report
        if: always()
        run: ./gradlew test jacocoTestReport --no-daemon

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: build/reports/tests/test/

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: build/reports/jacoco/test/

      - name: Check code coverage
        run: ./gradlew jacocoTestCoverageVerification --no-daemon || true
        # Note: Coverage threshold is 30%, currently at ~19%
        # This check is non-blocking until we add more tests

  # =============================================================================
  # Frontend Tests (React + TypeScript)
  # =============================================================================
  frontend-test:
    name: Frontend Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Lint TypeScript
        working-directory: ./frontend
        run: npm run lint || true

      - name: Type check
        working-directory: ./frontend
        run: npx tsc --noEmit

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm run test:run

      - name: Generate coverage report
        working-directory: ./frontend
        run: npm run test:coverage

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Upload frontend coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/

  # =============================================================================
  # Docker Build Test
  # =============================================================================
  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (test)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: sensorvision-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker images | grep sensorvision-backend

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [backend-test]
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # Build Summary
  # =============================================================================
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-build-test]
    if: always()

    steps:
      - name: Check build status
        run: |
          echo "Backend Test: ${{ needs.backend-test.result }}"
          echo "Frontend Test: ${{ needs.frontend-test.result }}"
          echo "Docker Build: ${{ needs.docker-build-test.result }}"

      - name: Build failed
        if: needs.backend-test.result == 'failure' || needs.frontend-test.result == 'failure' || needs.docker-build-test.result == 'failure'
        run: |
          echo "Build failed! Please check the logs."
          exit 1

      - name: Build succeeded
        if: needs.backend-test.result == 'success' && needs.frontend-test.result == 'success' && needs.docker-build-test.result == 'success'
        run: |
          echo "All tests passed successfully!"
