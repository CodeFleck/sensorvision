name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: sensorvision-backend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # =============================================================================
  # Build and Push to ECR
  # =============================================================================
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    outputs:
      image_tag: ${{ steps.image.outputs.image_tag }}
      ecr_registry: ${{ steps.login-ecr.outputs.registry }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          # Build and push Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          format: 'table'
          exit-code: '0'  # Don't fail on vulnerabilities for now
          severity: 'CRITICAL,HIGH'

  # =============================================================================
  # Deploy to EC2
  # =============================================================================
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push
    # environment:
    #   name: production
    #   url: https://${{ secrets.PRODUCTION_DOMAIN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Copy deployment files to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          # Copy necessary files
          scp -i ~/.ssh/deploy_key \
            docker-compose.production.yml \
            deploy.sh \
            nginx.conf \
            $EC2_USER@$EC2_HOST:/home/$EC2_USER/sensorvision/

      - name: Create .env.production file
        run: |
          cat > .env.production << 'ENVEOF'
          AWS_REGION=${{ env.AWS_REGION }}
          ECR_REGISTRY=${{ needs.build-and-push.outputs.ecr_registry }}
          IMAGE_TAG=${{ needs.build-and-push.outputs.image_tag }}
          DB_URL=${{ secrets.DB_URL }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION_MS=${{ secrets.JWT_EXPIRATION_MS }}
          JWT_ISSUER=${{ secrets.JWT_ISSUER }}
          MQTT_BROKER_URL=tcp://mosquitto:1883
          MQTT_USERNAME=${{ secrets.MQTT_USERNAME }}
          MQTT_PASSWORD=${{ secrets.MQTT_PASSWORD }}
          MQTT_DEVICE_AUTH_REQUIRED=true
          DOMAIN=${{ secrets.PRODUCTION_DOMAIN }}
          APP_URL=https://${{ secrets.PRODUCTION_DOMAIN }}
          EMAIL_ENABLED=${{ secrets.EMAIL_ENABLED }}
          EMAIL_FROM=${{ secrets.EMAIL_FROM }}
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
          SMS_ENABLED=${{ secrets.SMS_ENABLED }}
          TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }}
          SMS_FROM_NUMBER=${{ secrets.SMS_FROM_NUMBER }}
          WEBHOOK_ENABLED=true
          SLACK_ENABLED=${{ secrets.SLACK_ENABLED }}
          SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
          TEAMS_ENABLED=${{ secrets.TEAMS_ENABLED }}
          TEAMS_WEBHOOK_URL=${{ secrets.TEAMS_WEBHOOK_URL }}
          SUPPORT_ISSUE_EMAIL=${{ secrets.SUPPORT_ISSUE_EMAIL }}
          ENVEOF

      - name: Copy .env.production to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          scp -i ~/.ssh/deploy_key .env.production $EC2_USER@$EC2_HOST:/home/$EC2_USER/sensorvision/
          ssh -i ~/.ssh/deploy_key $EC2_USER@$EC2_HOST "chmod 600 /home/$EC2_USER/sensorvision/.env.production"

      - name: Deploy application
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -i ~/.ssh/deploy_key $EC2_USER@$EC2_HOST << 'EOF'
            cd /home/$EC2_USER/sensorvision

            # Make deploy script executable
            chmod +x deploy.sh

            # Run deployment
            ./deploy.sh
          EOF

      - name: Verify deployment
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -i ~/.ssh/deploy_key $EC2_USER@$EC2_HOST << 'EOF'
            cd /home/$EC2_USER/sensorvision

            # Check if containers are running
            docker-compose -f docker-compose.production.yml ps

            # Check health endpoint
            echo "Waiting for application to be healthy..."
            for i in {1..30}; do
              if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
                echo "Application is healthy!"
                exit 0
              fi
              echo "Attempt $i/30: Application not ready yet..."
              sleep 10
            done

            echo "Application failed health check!"
            exit 1
          EOF

      - name: Cleanup SSH key
        if: always()
        run: rm -f ~/.ssh/deploy_key

  # =============================================================================
  # Post-Deployment Notifications
  # =============================================================================
  notify:
    name: Send Deployment Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
      - name: Notify Slack on success
        if: needs.deploy.result == 'success' && secrets.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "✅ SensorVision deployment to production successful!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "✅ *SensorVision Production Deployment Successful*\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}\n*URL:* https://${{ secrets.PRODUCTION_DOMAIN }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Notify Slack on failure
        if: needs.deploy.result == 'failure' && secrets.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "❌ SensorVision deployment to production failed!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "❌ *SensorVision Production Deployment Failed*\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}\n*Check logs:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
