version: '3.8'

services:
  # PostgreSQL Database - Use RDS in AWS, this is for standalone deployment
  postgres:
    image: postgres:15-alpine
    container_name: sensorvision-postgres
    environment:
      POSTGRES_DB: sensorvision
      POSTGRES_USER: ${DB_USERNAME:-sensoradmin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - sensorvision-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-sensoradmin}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Only expose port if not using RDS
    # ports:
    #   - "5432:5432"

  # MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: sensorvision-mosquitto
    ports:
      - "1883:1883"    # MQTT
      - "9001:9001"    # MQTT over WebSocket
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - mosquitto-data:/mosquitto/data
      - mosquitto-logs:/mosquitto/log
    networks:
      - sensorvision-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mosquitto_sub", "-t", "$$SYS/#", "-C", "1", "-i", "healthcheck", "-W", "3"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Spring Boot Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        - JAR_FILE=build/libs/*.jar
    container_name: sensorvision-app
    environment:
      # Spring Profile
      - SPRING_PROFILES_ACTIVE=prod

      # Database Configuration
      - SPRING_DATASOURCE_URL=${DB_URL:-jdbc:postgresql://postgres:5432/sensorvision}
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME:-sensoradmin}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD:-changeme}

      # MQTT Configuration
      - MQTT_BROKER_URL=${MQTT_URL:-tcp://mosquitto:1883}
      - MQTT_CLIENT_ID=${MQTT_CLIENT_ID:-sensorvision-prod}

      # Application Configuration
      - SERVER_PORT=8080
      - SIMULATOR_ENABLED=${SIMULATOR_ENABLED:-false}

      # Logging
      - LOGGING_LEVEL_ROOT=INFO
      - LOGGING_LEVEL_ORG_SENSORVISION=INFO

      # JVM Options
      - JAVA_OPTS=-Xmx512m -Xms256m -XX:+UseG1GC
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
    networks:
      - sensorvision-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sensorvision-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - sensorvision-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus (Optional - for metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: sensorvision-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - sensorvision-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana (Optional - for visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: sensorvision-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    networks:
      - sensorvision-network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  sensorvision-network:
    driver: bridge

volumes:
  postgres-data:
  mosquitto-data:
  mosquitto-logs:
  nginx-logs:
  prometheus-data:
  grafana-data:
