# Automatic Deployment Issue Creator (PowerShell version)
# Creates GitHub issues when deployment errors occur

param(
    [string]$ErrorTitle = "",
    [string]$ErrorDescription = "",
    [ValidateSet("critical", "high", "medium", "low")]
    [string]$Severity = "medium"
)

# Colors for output
function Write-Info($message) {
    Write-Host "[INFO] $message" -ForegroundColor Blue
}

function Write-Success($message) {
    Write-Host "[SUCCESS] $message" -ForegroundColor Green
}

function Write-Error-Custom($message) {
    Write-Host "[ERROR] $message" -ForegroundColor Red
}

# Check if gh CLI is installed
if (!(Get-Command gh -ErrorAction SilentlyContinue)) {
    Write-Error-Custom "GitHub CLI (gh) is not installed."
    Write-Host "Install from: https://cli.github.com/"
    exit 1
}

# Get error details
if ([string]::IsNullOrEmpty($ErrorTitle)) {
    $ErrorTitle = Read-Host "Enter error title"
}

if ([string]::IsNullOrEmpty($ErrorDescription)) {
    Write-Host "Enter error description (press Ctrl+Z then Enter when done):"
    $ErrorDescription = [System.Console]::In.ReadToEnd()
}

# Get current date
$CurrentDate = Get-Date -Format "yyyy-MM-dd"

# Determine labels based on severity
$Priority = switch ($Severity) {
    "critical" {
        $Labels = "deployment-error,bug,critical,needs-investigation"
        "üî¥ CRITICAL"
    }
    "high" {
        $Labels = "deployment-error,bug,high-priority,needs-investigation"
        "üü† HIGH"
    }
    "medium" {
        $Labels = "deployment-error,bug,needs-investigation"
        "üü° MEDIUM"
    }
    "low" {
        $Labels = "deployment-error,needs-investigation"
        "üü¢ LOW"
    }
    default {
        $Labels = "deployment-error,bug,needs-investigation"
        "üü° MEDIUM"
    }
}

# Get current commit and branch info
try {
    $CurrentCommit = (git rev-parse --short HEAD 2>$null) -replace "`n", ""
    $CurrentBranch = (git branch --show-current 2>$null) -replace "`n", ""
} catch {
    $CurrentCommit = "unknown"
    $CurrentBranch = "unknown"
}

# Get recent deployment logs if available
$RecentLogs = ""
try {
    $RecentRun = gh run list --limit 1 --json databaseId,conclusion,displayTitle 2>$null
    if ($RecentRun) {
        $RecentLogs = @"

### Recent GitHub Actions Run
``````json
$RecentRun
``````
"@
    }
} catch {
    # Ignore if gh run fails
}

# Create issue body
$IssueBody = @"
## Deployment Error Report

**Priority:** $Priority
**Date:** $CurrentDate
**Commit:** ``$CurrentCommit``
**Branch:** ``$CurrentBranch``

---

## Error Description

$ErrorDescription

---

## Environment Information

- **Production Server:** 35.88.65.186
- **Backend Port:** 8080
- **Frontend Port:** 3000
- **Region:** us-west-2

---

## Investigation Steps

- [ ] Review deployment logs
- [ ] Check application logs on EC2
- [ ] Verify database connectivity
- [ ] Check Docker container status
- [ ] Review recent code changes
- [ ] Test locally to reproduce

---

## Suggested Actions

1. Review the error logs above
2. Check ``DEPLOY_DOCUMENTATION.md`` for similar issues
3. Attempt rollback if necessary (see DEPLOY_DOCUMENTATION.md)
4. Fix the underlying issue
5. Update deployment documentation

$RecentLogs

---

## Rollback Information

If rollback is needed, see **Rollback Procedures** in ``DEPLOY_DOCUMENTATION.md``

Quick rollback:
``````bash
git checkout -b rollback/fix-$CurrentCommit <working-commit>
git push origin rollback/fix-$CurrentCommit
gh pr create --title "Rollback: $ErrorTitle"
``````

---

*Auto-generated by deployment error tracking system*
*See: scripts/create-deployment-issue.ps1*
"@

# Create the issue
Write-Info "Creating GitHub issue..."
try {
    $IssueUrl = gh issue create `
        --title "[DEPLOYMENT ERROR] - $CurrentDate - $ErrorTitle" `
        --label $Labels `
        --body $IssueBody

    Write-Success "Issue created successfully!"
    Write-Host ""
    Write-Host "Issue URL: " -NoNewline
    Write-Host $IssueUrl -ForegroundColor Green
    Write-Host ""

    # Update DEPLOY_DOCUMENTATION.md with error reference
    if (Test-Path "DEPLOY_DOCUMENTATION.md") {
        Write-Info "Updating DEPLOY_DOCUMENTATION.md..."

        $ErrorEntry = @"


### $CurrentDate - $ErrorTitle

**Type:** Deployment Error
**Status:** ‚ùå Failed
**Priority:** $Priority
**Git Commit:** ``$CurrentCommit``
**GitHub Issue:** $IssueUrl

**Error Description:**
$ErrorDescription

**Actions Taken:**
- Automatic GitHub issue created
- Investigation in progress

---
"@

        # Read the file
        $content = Get-Content "DEPLOY_DOCUMENTATION.md" -Raw

        # Insert after "## Deployment Log"
        $content = $content -replace "(## Deployment Log)", "`$1`n$ErrorEntry"

        # Write back to file
        Set-Content "DEPLOY_DOCUMENTATION.md" -Value $content

        Write-Success "DEPLOY_DOCUMENTATION.md updated"
    }

    # Next steps
    Write-Info "Next steps:"
    Write-Host "1. Review the issue: $IssueUrl"
    Write-Host "2. Check deployment logs: gh run view --log"
    Write-Host "3. Consider rollback if critical: see DEPLOY_DOCUMENTATION.md"

} catch {
    Write-Error-Custom "Failed to create issue: $_"
    exit 1
}
