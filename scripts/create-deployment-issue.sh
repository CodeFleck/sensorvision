#!/bin/bash

#########################################################
# Automatic Deployment Issue Creator
# Creates GitHub issues when deployment errors occur
#########################################################

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if gh CLI is installed
if ! command -v gh &> /dev/null; then
    print_error "GitHub CLI (gh) is not installed."
    echo "Install from: https://cli.github.com/"
    exit 1
fi

# Get error details from arguments or prompt
ERROR_TITLE="${1:-}"
ERROR_DESCRIPTION="${2:-}"
ERROR_SEVERITY="${3:-medium}"

if [ -z "$ERROR_TITLE" ]; then
    read -p "Enter error title: " ERROR_TITLE
fi

if [ -z "$ERROR_DESCRIPTION" ]; then
    echo "Enter error description (press Ctrl+D when done):"
    ERROR_DESCRIPTION=$(cat)
fi

# Get current date
CURRENT_DATE=$(date +%Y-%m-%d)

# Determine labels based on severity
case $ERROR_SEVERITY in
    critical)
        LABELS="deployment-error,bug,critical,needs-investigation"
        PRIORITY="🔴 CRITICAL"
        ;;
    high)
        LABELS="deployment-error,bug,high-priority,needs-investigation"
        PRIORITY="🟠 HIGH"
        ;;
    medium)
        LABELS="deployment-error,bug,needs-investigation"
        PRIORITY="🟡 MEDIUM"
        ;;
    low)
        LABELS="deployment-error,needs-investigation"
        PRIORITY="🟢 LOW"
        ;;
    *)
        LABELS="deployment-error,bug,needs-investigation"
        PRIORITY="🟡 MEDIUM"
        ;;
esac

# Get current commit and branch info
CURRENT_COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
CURRENT_BRANCH=$(git branch --show-current 2>/dev/null || echo "unknown")

# Get recent deployment logs if available
RECENT_LOGS=""
if gh run list --limit 1 &>/dev/null; then
    RECENT_RUN=$(gh run list --limit 1 --json databaseId,conclusion,displayTitle --jq '.[0]')
    RECENT_LOGS="\n### Recent GitHub Actions Run\n\`\`\`json\n${RECENT_RUN}\n\`\`\`"
fi

# Create issue body
ISSUE_BODY=$(cat <<EOF
## Deployment Error Report

**Priority:** ${PRIORITY}
**Date:** ${CURRENT_DATE}
**Commit:** \`${CURRENT_COMMIT}\`
**Branch:** \`${CURRENT_BRANCH}\`

---

## Error Description

${ERROR_DESCRIPTION}

---

## Environment Information

- **Production Server:** 35.88.65.186
- **Backend Port:** 8080
- **Frontend Port:** 3000
- **Region:** us-west-2

---

## Investigation Steps

- [ ] Review deployment logs
- [ ] Check application logs on EC2
- [ ] Verify database connectivity
- [ ] Check Docker container status
- [ ] Review recent code changes
- [ ] Test locally to reproduce

---

## Suggested Actions

1. Review the error logs above
2. Check \`DEPLOY_DOCUMENTATION.md\` for similar issues
3. Attempt rollback if necessary (see DEPLOY_DOCUMENTATION.md)
4. Fix the underlying issue
5. Update deployment documentation

${RECENT_LOGS}

---

## Rollback Information

If rollback is needed, see **Rollback Procedures** in \`DEPLOY_DOCUMENTATION.md\`

Quick rollback:
\`\`\`bash
git checkout -b rollback/fix-${CURRENT_COMMIT} <working-commit>
git push origin rollback/fix-${CURRENT_COMMIT}
gh pr create --title "Rollback: ${ERROR_TITLE}"
\`\`\`

---

*Auto-generated by deployment error tracking system*
*See: scripts/create-deployment-issue.sh*
EOF
)

# Create the issue
print_info "Creating GitHub issue..."
ISSUE_URL=$(gh issue create \
    --title "[DEPLOYMENT ERROR] - ${CURRENT_DATE} - ${ERROR_TITLE}" \
    --label "${LABELS}" \
    --body "${ISSUE_BODY}")

if [ $? -eq 0 ]; then
    print_success "Issue created successfully!"
    echo ""
    echo -e "${GREEN}Issue URL:${NC} ${ISSUE_URL}"
    echo ""

    # Update DEPLOY_DOCUMENTATION.md with error reference
    if [ -f "DEPLOY_DOCUMENTATION.md" ]; then
        print_info "Updating DEPLOY_DOCUMENTATION.md..."

        # Create error entry
        ERROR_ENTRY=$(cat <<EOF

### ${CURRENT_DATE} - ${ERROR_TITLE}

**Type:** Deployment Error
**Status:** ❌ Failed
**Priority:** ${PRIORITY}
**Git Commit:** \`${CURRENT_COMMIT}\`
**GitHub Issue:** ${ISSUE_URL}

**Error Description:**
${ERROR_DESCRIPTION}

**Actions Taken:**
- Automatic GitHub issue created
- Investigation in progress

---
EOF
)

        # Insert after the "Deployment Log" header
        sed -i "/## Deployment Log/a\\${ERROR_ENTRY}" DEPLOY_DOCUMENTATION.md || \
        echo -e "\n${ERROR_ENTRY}" >> DEPLOY_DOCUMENTATION.md

        print_success "DEPLOY_DOCUMENTATION.md updated"
    fi

    # Optionally send notification (can be extended)
    print_info "Next steps:"
    echo "1. Review the issue: ${ISSUE_URL}"
    echo "2. Check deployment logs: gh run view --log"
    echo "3. Consider rollback if critical: see DEPLOY_DOCUMENTATION.md"
else
    print_error "Failed to create issue"
    exit 1
fi
