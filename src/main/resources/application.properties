# ==========================================
# SensorVision - Main Application Configuration
# ==========================================
# This is the base configuration file used across all environments.
# Environment-specific settings are in application-{profile}.properties
# Use environment variables for sensitive data and deployment-specific settings.

# ==========================================
# SERVER CONFIGURATION
# ==========================================
server.port=8080

# ==========================================
# SPRING BOOT CORE CONFIGURATION
# ==========================================
spring.application.name=sensorvision

# Static Resources Configuration
# Don't throw exceptions for missing static resources - let controllers handle routing
spring.web.resources.add-mappings=true

# MVC Configuration
# Don't throw exception when no handler is found - let error handler deal with it
spring.mvc.throw-exception-if-no-handler-found=false

# ==========================================
# DATABASE CONFIGURATION
# ==========================================
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5432/sensorvision}
spring.datasource.username=${DB_USERNAME:}
spring.datasource.password=${DB_PASSWORD:}

# HikariCP Connection Pool Settings - Optimized for high availability
spring.datasource.hikari.maximum-pool-size=${DB_POOL_SIZE:20}
spring.datasource.hikari.minimum-idle=${DB_POOL_MIN_IDLE:5}
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.initialization-fail-timeout=60000
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.leak-detection-threshold=60000

# ==========================================
# JPA/HIBERNATE CONFIGURATION
# ==========================================
spring.jpa.open-in-view=false
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=validate

# Hibernate Properties
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# ==========================================
# FLYWAY DATABASE MIGRATIONS
# ==========================================
spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=true
spring.flyway.connect-retries=10
spring.flyway.connect-retries-interval=5
# Temporarily disable validation to handle V26 migration conflict
spring.flyway.validate-on-migrate=false
spring.flyway.out-of-order=true

# ==========================================
# EMAIL/SMTP CONFIGURATION
# ==========================================
spring.mail.host=${SMTP_HOST:smtp.gmail.com}
spring.mail.port=${SMTP_PORT:587}
spring.mail.username=${SMTP_USERNAME:}
spring.mail.password=${SMTP_PASSWORD:}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# ==========================================
# SECURITY CONFIGURATION
# ==========================================
# JWT Configuration - SECURITY: JWT_SECRET MUST be set via environment variable
# Using symmetric key (for single-service architecture)
# In production with microservices, use RSA keys or external issuer
spring.security.oauth2.resourceserver.jwt.secret=${JWT_SECRET:}

# OAuth2 Client Configuration - Google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:your-google-client-id}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:your-google-client-secret}
spring.security.oauth2.client.registration.google.scope[0]=email
spring.security.oauth2.client.registration.google.scope[1]=profile
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# OAuth2 Client Configuration - GitHub
spring.security.oauth2.client.registration.github.client-id=${GITHUB_CLIENT_ID:your-github-client-id}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET:your-github-client-secret}
spring.security.oauth2.client.registration.github.scope[0]=user:email
spring.security.oauth2.client.registration.github.scope[1]=read:user
spring.security.oauth2.client.registration.github.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# ==========================================
# MQTT BROKER CONFIGURATION
# ==========================================
mqtt.broker.url=${MQTT_BROKER_URL:tcp://localhost:1883}
mqtt.broker.username=${MQTT_USERNAME:}
mqtt.broker.password=${MQTT_PASSWORD:}

# MQTT Device Authentication
# SECURITY: Device authentication is required by default
# Set to false only for development/testing with trusted networks
mqtt.device-auth.required=${MQTT_DEVICE_AUTH_REQUIRED:true}

# ==========================================
# NOTIFICATION SERVICES CONFIGURATION
# ==========================================
# Email Notifications
notification.email.enabled=${EMAIL_ENABLED:false}
notification.email.from=${EMAIL_FROM:noreply@sensorvision.com}

# SMS Notifications (Twilio)
notification.sms.enabled=${SMS_ENABLED:false}
notification.sms.from=${SMS_FROM_NUMBER:}
notification.sms.twilio.account-sid=${TWILIO_ACCOUNT_SID:}
notification.sms.twilio.auth-token=${TWILIO_AUTH_TOKEN:}

# Webhook Notifications
notification.webhook.enabled=${WEBHOOK_ENABLED:true}
notification.webhook.timeout-ms=${WEBHOOK_TIMEOUT_MS:5000}

# Slack Notifications
notifications.slack.enabled=${SLACK_ENABLED:false}
notifications.slack.webhook-url=${SLACK_WEBHOOK_URL:}

# Microsoft Teams Notifications
notifications.teams.enabled=${TEAMS_ENABLED:false}
notifications.teams.webhook-url=${TEAMS_WEBHOOK_URL:}

# ==========================================
# SUPPORT SYSTEM CONFIGURATION
# ==========================================
support.issue.email=${SUPPORT_ISSUE_EMAIL:support@sensorvision.com}
support.issue.enabled=${SUPPORT_ISSUE_ENABLED:true}

# ==========================================
# SIMULATOR CONFIGURATION
# ==========================================
simulator.enabled=true
simulator.device-count=10
simulator.interval-seconds=30

# ==========================================
# TELEMETRY CONFIGURATION
# ==========================================
# Auto-provision Devices
# Automatically create devices on first data send
# When enabled, devices sending telemetry data with a valid API token will be auto-created
# The device will belong to the same organization as the token used for authentication
telemetry.auto-provision.enabled=${TELEMETRY_AUTO_PROVISION_ENABLED:true}

# ==========================================
# APPLICATION SETTINGS
# ==========================================
# Base URL for the application (used in emails, links, etc.)
# IMPORTANT: Set this to the correct URL for each environment
# Local: http://localhost:3001
# Production: http://35.88.65.186.nip.io:8080
app.base-url=${APP_BASE_URL:http://localhost:3001}

# JWT Configuration
# SECURITY: JWT secret MUST be set via JWT_SECRET environment variable
app.jwt.secret=${JWT_SECRET:}
app.jwt.expiration-ms=${JWT_EXPIRATION_MS:86400000}
app.jwt.issuer=${JWT_ISSUER:http://localhost:8080}

# OAuth2 Configuration
# OAuth2 redirect URL after successful authentication
# For production, set to: http://35.88.65.186:8080
app.oauth2.redirect-base-url=${OAUTH2_REDIRECT_BASE_URL:http://localhost:3001}

# ==========================================
# SPRING BOOT ACTUATOR & MONITORING
# ==========================================
# Management Endpoints
management.endpoints.web.exposure.include=health,info,metrics,prometheus

# Health Endpoint Configuration
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always
management.endpoint.health.probes.enabled=true

# Health Checks
management.health.db.enabled=true
management.health.diskspace.enabled=true

# Metrics Configuration
management.metrics.tags.application=${spring.application.name}
management.metrics.export.prometheus.enabled=true

# ==========================================
# RATE LIMITING CONFIGURATION
# ==========================================
rate-limit.enabled=true

# Default limits for general API endpoints (requests per minute)
rate-limit.default-capacity=100
rate-limit.default-refill-tokens=100
rate-limit.default-refill-minutes=1

# Data ingestion endpoints (higher limits for IoT telemetry)
rate-limit.data-ingestion-capacity=1000
rate-limit.data-ingestion-refill-tokens=1000
rate-limit.data-ingestion-refill-minutes=1

# Import endpoints (moderate limits for bulk operations)
rate-limit.import-capacity=50
rate-limit.import-refill-tokens=50
rate-limit.import-refill-minutes=1

# Export endpoints
rate-limit.export-capacity=100
rate-limit.export-refill-tokens=100
rate-limit.export-refill-minutes=1

# ==========================================
# LOGGING CONFIGURATION
# ==========================================
# Log Levels
logging.level.root=INFO
logging.level.org.sensorvision=INFO
logging.level.org.springframework.web=INFO
logging.level.org.hibernate=WARN
logging.level.org.hibernate.SQL=ERROR
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=ERROR
logging.level.org.hibernate.engine.jdbc.spi.SqlStatementLogger=ERROR

# Log File Configuration
logging.file.name=logs/sensorvision.log

# Log Patterns
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
