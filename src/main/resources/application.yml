server:
  port: 8080

spring:
  application:
    name: sensorvision
  web:
    resources:
      # Don't throw exceptions for missing static resources - let controllers handle routing
      add-mappings: true
  mvc:
    # Don't throw exception when no handler is found - let error handler deal with it
    throw-exception-if-no-handler-found: false
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/sensorvision}
    username: ${DB_USERNAME:}
    password: ${DB_PASSWORD:}
    hikari:
      # Connection pool settings for high availability
      maximum-pool-size: ${DB_POOL_SIZE:20}
      minimum-idle: ${DB_POOL_MIN_IDLE:5}
      connection-timeout: 30000  # 30 seconds
      idle-timeout: 600000       # 10 minutes
      max-lifetime: 1800000      # 30 minutes
      # Connection retry settings
      initialization-fail-timeout: 60000  # Wait up to 60 seconds for DB on startup
      # Connection test query for health checks
      connection-test-query: SELECT 1
      # Leak detection for debugging connection issues
      leak-detection-threshold: 60000
  jpa:
    open-in-view: false
    show-sql: false
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        format_sql: false
        # Enable second-level cache for better performance
        cache:
          use_second_level_cache: false
        # JDBC batch settings for bulk operations
        jdbc:
          batch_size: 20
          batch_versioned_data: true
        # Query optimization
        order_inserts: true
        order_updates: true
  flyway:
    enabled: true
    baseline-on-migrate: true
    # Retry configuration for resilient migrations
    connect-retries: 10
    connect-retries-interval: 5  # 5 seconds between retries
  mail:
    host: ${SMTP_HOST:smtp.gmail.com}
    port: ${SMTP_PORT:587}
    username: ${SMTP_USERNAME:}
    password: ${SMTP_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000
  security:
    oauth2:
      resourceserver:
        jwt:
          # SECURITY: JWT secret MUST be set via JWT_SECRET environment variable
          # Using symmetric key (for single-service architecture)
          # In production with microservices, use RSA keys or external issuer
          secret: ${JWT_SECRET:}
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID:your-google-client-id}
            client-secret: ${GOOGLE_CLIENT_SECRET:your-google-client-secret}
            scope:
              - email
              - profile
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
          github:
            client-id: ${GITHUB_CLIENT_ID:your-github-client-id}
            client-secret: ${GITHUB_CLIENT_SECRET:your-github-client-secret}
            scope:
              - user:email
              - read:user
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"

mqtt:
  broker:
    url: ${MQTT_BROKER_URL:tcp://localhost:1883}
    username: ${MQTT_USERNAME:}
    password: ${MQTT_PASSWORD:}
  device-auth:
    # SECURITY: Device authentication is required by default
    # Set to false only for development/testing with trusted networks
    required: ${MQTT_DEVICE_AUTH_REQUIRED:true}

notification:
  email:
    enabled: ${EMAIL_ENABLED:false}
    from: ${EMAIL_FROM:noreply@sensorvision.com}
  sms:
    enabled: ${SMS_ENABLED:false}
    from: ${SMS_FROM_NUMBER:}
    twilio:
      account-sid: ${TWILIO_ACCOUNT_SID:}
      auth-token: ${TWILIO_AUTH_TOKEN:}
  webhook:
    enabled: ${WEBHOOK_ENABLED:true}
    timeout-ms: ${WEBHOOK_TIMEOUT_MS:5000}

support:
  issue:
    email: ${SUPPORT_ISSUE_EMAIL:support@sensorvision.com}
    enabled: ${SUPPORT_ISSUE_ENABLED:true}

simulator:
  enabled: true
  device-count: 10
  interval-seconds: 30

telemetry:
  auto-provision:
    # Automatically create devices on first data send
    # When enabled, devices sending telemetry data with a valid API token will be auto-created
    # The device will belong to the same organization as the token used for authentication
    enabled: ${TELEMETRY_AUTO_PROVISION_ENABLED:true}

app:
  # Base URL for the application (used in emails, links, etc.)
  # IMPORTANT: Set this to the correct URL for each environment
  # Local: http://localhost:3001
  # Production: http://35.88.65.186.nip.io:8080
  base-url: ${APP_BASE_URL:http://localhost:3001}
  jwt:
    # SECURITY: JWT secret MUST be set via JWT_SECRET environment variable
    secret: ${JWT_SECRET:}
    expiration-ms: ${JWT_EXPIRATION_MS:86400000} # 24 hours
    issuer: ${JWT_ISSUER:http://localhost:8080}
  oauth2:
    # OAuth2 redirect URL after successful authentication
    # For production, set to: http://35.88.65.186:8080
    redirect-base-url: ${OAUTH2_REDIRECT_BASE_URL:http://localhost:3001}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
  health:
    # Enable health checks for dependencies
    db:
      enabled: true
    diskspace:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
    export:
      prometheus:
        enabled: true

rate-limit:
  enabled: true
  # Default limits for general API endpoints (requests per minute)
  default-capacity: 100
  default-refill-tokens: 100
  default-refill-minutes: 1
  # Data ingestion endpoints (higher limits for IoT telemetry)
  data-ingestion-capacity: 1000
  data-ingestion-refill-tokens: 1000
  data-ingestion-refill-minutes: 1
  # Import endpoints (moderate limits for bulk operations)
  import-capacity: 50
  import-refill-tokens: 50
  import-refill-minutes: 1
  # Export endpoints
  export-capacity: 100
  export-refill-tokens: 100
  export-refill-minutes: 1

notifications:
  slack:
    enabled: ${SLACK_ENABLED:false}
    webhook-url: ${SLACK_WEBHOOK_URL:}
  teams:
    enabled: ${TEAMS_ENABLED:false}
    webhook-url: ${TEAMS_WEBHOOK_URL:}

logging:
  level:
    root: INFO
    org.sensorvision: INFO
    org.springframework.web: INFO
    org.hibernate: WARN
    # Reduce noisy Hibernate SQL and bind-parameter logs
    org.hibernate.SQL: ERROR
    org.hibernate.type.descriptor.sql.BasicBinder: ERROR
    org.hibernate.engine.jdbc.spi.SqlStatementLogger: ERROR
  file:
    name: logs/sensorvision.log
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
